<pyicqt>
	<!-- The JabberID of the transport. -->
	<jid>icq.example.org</jid>

	<!-- The component JID of the transport. Unless you're doing clustering, leave this alone -->
	<!-- <compjid>icq1</compjid> -->

	<!-- The location of the spool directory.. if relative, relative to -->
	<!-- this directory.  Do not include the jid of the transport. -->
	<spooldir>.</spooldir>

	<!-- The location of the PID file.. if relative, relative to this dir. -->
	<!-- Comment out if you do not want a pid file -->
	<pid>PyICQt.pid</pid>

	<!-- The IP address of the main Jabberd server -->
	<mainServer>127.0.0.1</mainServer>

	<!-- The JID of the main Jabber server -->
	<mainServerJID>jabber.localhost</mainServerJID>

	<!-- The website of the Jabber service -->
	<website>http://jabber.localhost/</website>

	<!-- The TCP port to connect to the Jabber server on -->
	<!-- (this is the default for Jabberd2) -->
	<port>5347</port>

	<!-- The TCP port that the web admin interface will answer on -->
	<!-- (uncomment to enable) -->
	<!-- <webport>12345</webport> -->

	<!-- The authentication token to use when connecting to the Jabber server -->
	<secret>secret</secret>

	<!-- The default language to use (for error/status messages) -->
	<lang>en</lang>

	<!-- Default message encoding to use -->
	<encoding>iso-8859-1</encoding>

	<!-- The hostname of the ICQ server you wish to connect to -->
	<icqServer>login.icq.com</icqServer>

	<!-- The port of the ICQ server you wish to connect to -->
	<icqPort>5238</icqPort>

	<!-- The name of Socks Proxy if connecting thru a proxy -->
	<!-- <socksProxyServer>im-proxy2</socksProxyServer> -->

	<!-- The Socks Proxy port to use when connecting thru a proxy -->
	<!-- <socksProxyPort>1080</socksProxyPort> -->

	<!-- Send greeting on login (enter text to be sent to users here) -->
	<!-- <sessionGreeting>enter message here</sessionGreeting> -->

	<!-- Send message on successful registration -->
	<!-- <registerMessage>You have successfully registered with PyICQt</registerMessage> -->

	<!-- Allow users of ICQ gateway to chat with AIM users -->
	<!-- (uncomment to enable) -->
	<!-- <crossChat/> -->

	<!-- Disable registration with the transport -->
	<!-- (uncomment to disable) -->
	<!-- <disableRegister/> -->

	<!-- Enable automatic invitation to reconnect on restart -->
	<!-- (uncomment to enable) -->
	<!-- <enableAutoInvite/> -->

	<!-- Disable xhtml support (messages with fonts and colors) -->
	<!-- (uncomment to disable) -->
	<!-- <disableXHTML/> -->

	<!-- Disable use of default avatar if none is specified -->
	<!-- (uncomment to disable) -->
	<!-- <disableDefaultAvatar/> -->

	<!-- You can choose which users you wish to have as administrators. These users can perform some tasks with Ad-Hoc commands that others cannot -->
	<admins>
	<!--<jid>admin@host.com</jid>-->
	</admins>

	<!-- You can select which event loop PyAIMt will use. It's probably safe to leave this as the default -->

	<!-- Use epoll for high-load Linux servers running kernel 2.6 or above -->
	<!--<reactor>epoll</reactor>-->

	<!-- Use kqueue for high-load FreeBSD servers -->
	<!--<reactor>kqueue</reactor>-->

	<!-- Use poll for high-load Unix servers -->
	<!--<reactor>poll</reactor>-->

	<!-- You can select which spool storage method you wish to use -->
	<!-- Available methods are: -->
	<!-- xmlfiles: single xml files in the spool directory in hashed dirs (default)-->
	<!-- legacyaimtransport: compatible with c-based aim transport, less functionality -->
	<!-- mysql: registration information stored in a MySQL database -->
	<!--<xdbDriver>xmlfiles</xdbDriver>-->

	<!-- For MySQL -->
	<!--<xdbDriver>mysql</xdbDriver>-->
	<!--<xdbDriver_mysql>-->
	<!--<username>pyicqt</username>-->
	<!--<password>pyicqt</password>-->
	<!--<database>pyicqt</database>-->
	<!--<server>localhost</server>-->
	<!--</xdbDriver_mysql>-->

	<!-- For XMLFiles -->
	<!--<xdbDriver>xmlfiles</xdbDriver>-->
	<!--<xdbDriver_xmlfiles>-->
	<!--<format>encrypted</format>--> <!-- Enable encryption of passwords -->
	<!--</xdbDriver_xmlfiles>-->

	<!-- Only grab avatars when a chat is initiated. -->
	<!-- NOT IMPLEMENTED YET -->
	<!-- <avatarsOnlyOnChat/> -->

	<!-- Use Jabber.com's XCP component protocol extensions. -->
	<!-- <useXCP/> -->

	<!-- SASL username used to bind to Jabber server. -->
	<!-- secret, above, is used for sasl password -->
	<!-- <saslUsername/> -->

	<!-- Use Jabberd 2's component protocol extensions. -->
	<!-- Requires saslUsername to work. -->
	<!-- <useJ2Component/> -->
</pyicqt>
